{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/dachi/Desktop/dreaming.com/app/components/header/Header.tsx"],"sourcesContent":["'use client';\n\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Dialog,\n  IconButton,\n  Grid,\n} from '@mui/material';\nimport { Close } from '@mui/icons-material';\nimport { useState } from 'react';\n\ninterface Flower {\n  name: string;\n  img: string;\n  description: string;\n}\n\nconst flowers: Flower[] = [\n  {\n    name: 'Rose',\n    img: '/images/rose.jpg',\n    description:\n      'A classic symbol of love and romance, known for its vibrant colors and sweet fragrance.',\n  },\n  {\n    name: 'Tulip',\n    img: '/images/tulip.jpg',\n    description:\n      'Bright and cheerful flowers that come in many colors, often associated with spring.',\n  },\n  {\n    name: 'Lily',\n    img: '/images/lily.jpg',\n    description:\n      'Elegant flowers with a pleasant fragrance, often used in weddings and celebrations.',\n  },\n  {\n    name: 'Sunflower',\n    img: '/images/sunflower.jpg',\n    description:\n      'Large, vibrant flowers that follow the sun and symbolize adoration and loyalty.',\n  },\n];\n\nconst MainContent = () => {\n  const [selectedFlower, setSelectedFlower] = useState<Flower | null>(null);\n\n  const handleOpen = (flower: Flower) => setSelectedFlower(flower);\n  const handleClose = () => setSelectedFlower(null);\n\n  return (\n    <>\n      <Box p={4}>\n        <Typography variant=\"h4\" textAlign=\"center\" mb={4}>\n          Our Flowers\n        </Typography>\n\n        <Grid container spacing={4} justifyContent=\"center\">\n          {flowers.map((flower) => (\n            <Grid item xs={12} sm={6} md={4} lg={3} key={flower.name}>\n              <Card\n                sx={{\n                  cursor: 'pointer',\n                  transition: 'transform 0.3s',\n                  '&:hover': {\n                    transform: 'scale(1.05)',\n                  },\n                }}\n                onClick={() => handleOpen(flower)}\n              >\n                <Box\n                  component=\"img\"\n                  src={flower.img}\n                  alt={flower.name}\n                  loading=\"lazy\"\n                  onError={(e) =>\n                    (e.currentTarget.src = '/images/fallback.jpg')\n                  }\n                  sx={{\n                    width: '100%',\n                    height: 200,\n                    objectFit: 'cover',\n                  }}\n                />\n                <CardContent>\n                  <Typography variant=\"h6\">{flower.name}</Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n\n      <Dialog open={!!selectedFlower} onClose={handleClose} maxWidth=\"sm\" fullWidth>\n        {selectedFlower && (\n          <Box position=\"relative\">\n            <IconButton\n              onClick={handleClose}\n              sx={{ position: 'absolute', top: 8, right: 8 }}\n              aria-label=\"close\"\n            >\n              <Close />\n            </IconButton>\n\n            <Box\n              component=\"img\"\n              src={selectedFlower.img}\n              alt={selectedFlower.name}\n              loading=\"lazy\"\n              onError={(e) =>\n                (e.currentTarget.src = '/images/fallback.jpg')\n              }\n              sx={{\n                width: '100%',\n                height: 300,\n                objectFit: 'cover',\n              }}\n            />\n            <Box p={3}>\n              <Typography variant=\"h5\" gutterBottom>\n                {selectedFlower.name}\n              </Typography>\n              <Typography variant=\"body1\">\n                {selectedFlower.description}\n              </Typography>\n            </Box>\n          </Box>\n        )}\n      </Dialog>\n    </>\n  );\n};\n\nexport default MainContent;\n"],"names":[],"mappings":";;;;AAYA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;AAXA;;;;AAoBA,MAAM,UAAoB;IACxB;QACE,MAAM;QACN,KAAK;QACL,aACE;IACJ;IACA;QACE,MAAM;QACN,KAAK;QACL,aACE;IACJ;IACA;QACE,MAAM;QACN,KAAK;QACL,aACE;IACJ;IACA;QACE,MAAM;QACN,KAAK;QACL,aACE;IACJ;CACD;AAED,MAAM,cAAc;;IAClB,MAAM,CAAC,gBAAgB,kBAAkB,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAEpE,MAAM,aAAa,CAAC,SAAmB,kBAAkB;IACzD,MAAM,cAAc,IAAM,kBAAkB;IAE5C,qBACE;;0BACE,6LAAC,oLAAA,CAAA,MAAG;gBAAC,GAAG;;kCACN,6LAAC,yMAAA,CAAA,aAAU;wBAAC,SAAQ;wBAAK,WAAU;wBAAS,IAAI;kCAAG;;;;;;kCAInD,6LAAC,uLAAA,CAAA,OAAI;wBAAC,SAAS;wBAAC,SAAS;wBAAG,gBAAe;kCACxC,QAAQ,GAAG,CAAC,CAAC,uBACZ,6LAAC,uLAAA,CAAA,OAAI;gCAAC,IAAI;gCAAC,IAAI;gCAAI,IAAI;gCAAG,IAAI;gCAAG,IAAI;0CACnC,cAAA,6LAAC,uLAAA,CAAA,OAAI;oCACH,IAAI;wCACF,QAAQ;wCACR,YAAY;wCACZ,WAAW;4CACT,WAAW;wCACb;oCACF;oCACA,SAAS,IAAM,WAAW;;sDAE1B,6LAAC,oLAAA,CAAA,MAAG;4CACF,WAAU;4CACV,KAAK,OAAO,GAAG;4CACf,KAAK,OAAO,IAAI;4CAChB,SAAQ;4CACR,SAAS,CAAC,IACP,EAAE,aAAa,CAAC,GAAG,GAAG;4CAEzB,IAAI;gDACF,OAAO;gDACP,QAAQ;gDACR,WAAW;4CACb;;;;;;sDAEF,6LAAC,4MAAA,CAAA,cAAW;sDACV,cAAA,6LAAC,yMAAA,CAAA,aAAU;gDAAC,SAAQ;0DAAM,OAAO,IAAI;;;;;;;;;;;;;;;;;+BA1BE,OAAO,IAAI;;;;;;;;;;;;;;;;0BAkC9D,6LAAC,6LAAA,CAAA,SAAM;gBAAC,MAAM,CAAC,CAAC;gBAAgB,SAAS;gBAAa,UAAS;gBAAK,SAAS;0BAC1E,gCACC,6LAAC,oLAAA,CAAA,MAAG;oBAAC,UAAS;;sCACZ,6LAAC,yMAAA,CAAA,aAAU;4BACT,SAAS;4BACT,IAAI;gCAAE,UAAU;gCAAY,KAAK;gCAAG,OAAO;4BAAE;4BAC7C,cAAW;sCAEX,cAAA,6LAAC,6JAAA,CAAA,UAAK;;;;;;;;;;sCAGR,6LAAC,oLAAA,CAAA,MAAG;4BACF,WAAU;4BACV,KAAK,eAAe,GAAG;4BACvB,KAAK,eAAe,IAAI;4BACxB,SAAQ;4BACR,SAAS,CAAC,IACP,EAAE,aAAa,CAAC,GAAG,GAAG;4BAEzB,IAAI;gCACF,OAAO;gCACP,QAAQ;gCACR,WAAW;4BACb;;;;;;sCAEF,6LAAC,oLAAA,CAAA,MAAG;4BAAC,GAAG;;8CACN,6LAAC,yMAAA,CAAA,aAAU;oCAAC,SAAQ;oCAAK,YAAY;8CAClC,eAAe,IAAI;;;;;;8CAEtB,6LAAC,yMAAA,CAAA,aAAU;oCAAC,SAAQ;8CACjB,eAAe,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;AAQ3C;GAvFM;KAAA;uCAyFS"}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}